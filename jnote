import sys, curses, time, os, pathlib, shutil
from components.jnote_components import *   
from components.curses_components import *

notes_dir = os.path.expanduser("~") + "/.notes/"
pathlib.Path(notes_dir).mkdir(parents=True, exist_ok=True)

def handle_screen_size(mode_bar, search_bar, scroll_page, text_box):

    screen_width, screen_height = shutil.get_terminal_size()
    screen_height -= 1
    mbh = sbh = 3
    mbw = sbw = screen_width
    mbsy, sbsy= 0, mbh
    mbsx = sbsx = 0

    sph = tbh = screen_height - mbh - sbh  
    spw = tbw = screen_width // 2
    spsy = tbsy = mbh + sbh
    spsx, tbsx = 0, spw + 1

    mode_bar.set_window_size(mbh, mbw, mbsy, mbsx)
    search_bar.set_window_size(sbh, sbw, sbsy, sbsx)
    scroll_page.set_window_size(sph, spw, spsy, spsx)
    text_box.set_window_size(tbh, tbw, tbsy, tbsx)

def get_notes():

    notes_dir_contents = sorted(os.listdir(notes_dir))
    begin_index = 0

    for note in notes_dir_contents:

        if note.startswith("."): begin_index +=1
        else: break
            
    return notes_dir_contents[begin_index:]

def main(stdscr):
    
    stdscr.refresh()
    curses.use_default_colors()
    curses.curs_set(False)

    mode_bar = ModeBar()
    search_bar = SearchBarComponent()
    scroll_page = ScrollPage(notes_dir=notes_dir)
    text_box = TextBox(notes_dir=notes_dir)
    handle_screen_size(mode_bar, search_bar, scroll_page, text_box)

    scroll_page.items = get_notes()
    filter_is_more_specific = True

    while True:

        scroll_page.apply_filter(search_bar.query, filter_is_more_specific)
        filter_is_more_specific = True

        text_box.note = scroll_page.get_current_item()

        mode_bar.draw()
        scroll_page.draw()
        text_box.draw()
        search_bar.draw()

        ch = stdscr.getkey()

        if ch == '\n': 

            curses.endwin()
            os.system("vim " + notes_dir + scroll_page.get_current_item())

        elif ch == 'KEY_BACKSPACE':

            search_bar.query = search_bar.query[:-1]
            filter_is_more_specific = False

        elif ch == 'KEY_DC':

            search_bar.query = ""
            filter_is_more_specific = False

        elif ch == 'KEY_LEFT': 

            mode_bar.decrement_focus()

        elif ch == 'KEY_RIGHT': 

            mode_bar.increment_focus()

        elif ch == 'KEY_UP': 

            scroll_page.decrement_focus()

        elif ch == 'KEY_DOWN': 

            scroll_page.increment_focus()

        elif ch == 'KEY_SR': 

            text_box.decrement_startline()

        elif ch == 'KEY_SF': 

            text_box.increment_startline()

        elif ch == 'KEY_RESIZE':
            #FIXME
            pass

        elif len(ch) == 1: 
            search_bar.query += ch
    

try: curses.wrapper(main)
except KeyboardInterrupt: sys.exit()
except: raise