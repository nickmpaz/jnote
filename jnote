#!/usr/bin/env python3

import sys, curses, time, os, pathlib, shutil
from components.jnote_components import *   
from components.curses_components import *
from utils.note_actions import *

notes_dir = os.path.expanduser("~") + "/.notes/"
pathlib.Path(notes_dir).mkdir(parents=True, exist_ok=True)

def handle_screen_size(mode_bar, search_bar, scroll_page, text_box, confirm_window, notification_window):

    screen_width, screen_height = shutil.get_terminal_size()

    screen_height -= 1
    mbh = sbh = 3
    mbw = sbw = screen_width
    mbsy, sbsy= 0, mbh
    mbsx = sbsx = 0

    sph = tbh = screen_height - mbh - sbh  
    spw = tbw = screen_width // 2
    spsy = tbsy = mbh + sbh
    spsx, tbsx = 0, spw + 1

    cwh = nwh = screen_height // 3
    cww = nww = screen_width // 2
    cwsy = nwsy = screen_height // 3
    cwsx = nwsx = screen_width // 4

    confirm_window.set_window_size(cwh, cww, cwsy, cwsx)
    notification_window.set_window_size(nwh, nww, nwsy, nwsx)
    mode_bar.set_window_size(mbh, mbw, mbsy, mbsx)
    search_bar.set_window_size(sbh, sbw, sbsy, sbsx)
    scroll_page.set_window_size(sph, spw, spsy, spsx)
    text_box.set_window_size(tbh, tbw, tbsy, tbsx)
    
def create(search_bar, scroll_page, confirm_window):

    if search_bar.query == "": return 
    note_exists = search_bar.query in scroll_page.items
    if note_exists and not confirm_window.popup('overwrite "%s"' % search_bar.query): return

    curses.endwin()
    create_note(notes_dir, search_bar.query)
    
    if not note_exists:
        scroll_page.items.append(search_bar.query)
        scroll_page.items = sorted(scroll_page.items)

def edit(scroll_page):
    
    if not scroll_page.get_current_item(): return
    curses.endwin()
    edit_note(notes_dir, scroll_page.get_current_item())

def delete(scroll_page, confirm_window):

    if not scroll_page.get_current_item() or not confirm_window.popup('delete "%s"' % scroll_page.get_current_item()): return
    delete_note(notes_dir, scroll_page.get_current_item())
    scroll_page.items.pop(scroll_page.focus)
    scroll_page.decrement_focus()

def copy(): pass

def echo(scroll_page, notification_window):

    if not scroll_page.get_current_item(): return
    curses.endwin()
    echo_note(notes_dir, scroll_page.get_current_item())
    notification_window.popup('printed "%s" to console' % scroll_page.get_current_item())

def main(stdscr):
    
    stdscr.refresh()
    stdscr.keypad(True)
    curses.use_default_colors()
    curses.curs_set(False)

    mode_bar = ModeBar()
    search_bar = SearchBarComponent()
    scroll_page = ScrollPage(notes_dir=notes_dir)
    text_box = TextBox(notes_dir=notes_dir)
    confirm_window = ConfirmNotificationComponent(stdscr=stdscr)
    notification_window = NotificationComponent(stdscr=stdscr)
    handle_screen_size(mode_bar, search_bar, scroll_page, text_box, confirm_window, notification_window)

    scroll_page.items = get_notes(notes_dir)
    filter_is_more_specific = True

    while True:

        scroll_page.apply_filter(search_bar.query, filter_is_more_specific)
        filter_is_more_specific = True
        text_box.note = scroll_page.get_current_item()

        mode_bar.draw()
        scroll_page.draw()
        text_box.draw()
        search_bar.draw()

        ch = stdscr.getkey()

        if ch == '\n' and mode_bar.get_current_item() == "create": create(search_bar, scroll_page, confirm_window)
        
        elif ch == '\n' and mode_bar.get_current_item() == "edit": edit(scroll_page)

        elif ch == '\n' and mode_bar.get_current_item() == "delete": delete(scroll_page, confirm_window)

        elif ch == '\n' and mode_bar.get_current_item() == "copy": pass

        elif ch == '\n' and mode_bar.get_current_item() == "echo": echo(scroll_page, notification_window)

        elif ch == 'KEY_BACKSPACE': search_bar.query = search_bar.query[:-1]; filter_is_more_specific = False

        elif ch == 'KEY_DC': search_bar.query = ""; filter_is_more_specific = False

        elif ch == 'KEY_RESIZE': pass

        elif ch == 'KEY_LEFT': mode_bar.decrement_focus()

        elif ch == 'KEY_RIGHT': mode_bar.increment_focus()

        elif ch == 'KEY_UP': scroll_page.decrement_focus()

        elif ch == 'KEY_DOWN': scroll_page.increment_focus()

        elif ch == 'KEY_SR': text_box.decrement_startline()

        elif ch == 'KEY_SF': text_box.increment_startline()

        elif len(ch) == 1: search_bar.query += ch
    
try: curses.wrapper(main)
except KeyboardInterrupt: sys.exit()
except: raise